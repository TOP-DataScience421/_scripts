from numpy import array, rint
from numpy.linalg import matrix_rank, inv
from numpy.random import default_rng


m1 = default_rng().integers(-9, 10, size=(2, 2))
# [[ 4  4]
#  [-8  8]]

m2 = default_rng().integers(-9, 10, size=(3, 3))
# [[-9 -7  4]
#  [-4  7  1]
#  [ 7  5  2]]

m3 = array([
    [1, 2, 4],
    [2, 4, 8],
    [3, 6, 12],
])

# >>> matrix_rank(m1)
# np.int64(2)
# >>>
# >>> m1_inv = inv(m1)
# >>> print(m1_inv)
# [[ 0.125  -0.0625]
#  [ 0.125   0.0625]]
# >>>
# >>> m1 @ m1_inv
# array([[1., 0.],
#        [0., 1.]])
# >>>
# >>> m1_inv @ m1
# array([[1., 0.],
#        [0., 1.]])

# >>> matrix_rank(m2)
# np.int64(3)
# >>>
# >>> m2_inv = inv(m2)
# >>> print(m2_inv)
# [[-0.01948052 -0.07359307  0.07575758]
#  [-0.03246753  0.0995671   0.01515152]
#  [ 0.14935065  0.00865801  0.1969697 ]]
# >>>
# >>> m2 @ m2_inv
# array([[ 1.00000000e+00,  1.38777878e-17,  0.00000000e+00],
#        [-5.55111512e-17,  1.00000000e+00,  2.77555756e-17],
#        [ 1.11022302e-16,  6.93889390e-18,  1.00000000e+00]])
# >>>
# >>> rint(m2 @ m2_inv)
# array([[ 1.,  0.,  0.],
#        [-0.,  1.,  0.],
#        [ 0.,  0.,  1.]])
# >>>
# >>> m2_inv @ m2
# array([[ 1.00000000e+00, -1.11022302e-16,  5.55111512e-17],
#        [ 4.16333634e-17,  1.00000000e+00, -1.38777878e-17],
#        [ 0.00000000e+00, -1.11022302e-16,  1.00000000e+00]])
# >>>
# >>> rint(m2_inv @ m2)
# array([[ 1., -0.,  0.],
#        [ 0.,  1., -0.],
#        [ 0., -0.,  1.]])

# >>> matrix_rank(m3)
# np.int64(1)
# >>>
# >>> inv(m3)
# numpy.linalg.LinAlgError: Singular matrix


m4 = default_rng().integers(-9, 10, size=(4, 2))
# [[-8 -2]
#  [-9 -9]
#  [-8 -2]
#  [-7 -1]]

m5 = default_rng().integers(-9, 10, size=(2, 3))
# [[-1 -7 -9]
#  [ 9  3  8]]

# >>> m4
# array([[-8, -2],
#        [-9, -9],
#        [-8, -2],
#        [-7, -1]])
# >>> m4.shape
# (4, 2)
# >>>
# >>> m4.T
# array([[-8, -9, -8, -7],
#        [-2, -9, -2, -1]])
# >>> m4.T.shape
# (2, 4)
# >>>
# >>> m4_TtT = m4.T @ m4
# >>> m4_TtT
# array([[258, 120],
#        [120,  90]])
# >>>
# >>> matrix_rank(m4_TtT)
# np.int64(2)
# >>>
# >>> m4_TtT_inv = inv(m4_TtT)
# >>> m4_TtT_inv
# array([[ 0.01020408, -0.01360544],
#        [-0.01360544,  0.0292517 ]])
# >>>
# >>> m4_TtT @ m4_TtT_inv
# array([[ 1.00000000e+00,  0.00000000e+00],
#        [-2.22044605e-16,  1.00000000e+00]])
# >>>
# >>> m4_TtT_inv @ m4_TtT
# array([[ 1.00000000e+00, -2.22044605e-16],
#        [ 0.00000000e+00,  1.00000000e+00]])
# >>>
# >>> m4_L = m4_TtT_inv @ m4.T
# >>> m4_L
# array([[-0.05442177,  0.03061224, -0.05442177, -0.05782313],
#        [ 0.05034014, -0.14081633,  0.05034014,  0.06598639]])
# >>>
# >>> matrix_rank(m4_L)
# np.int64(2)
# >>>
# >>> m4_L @ m4
# array([[ 1.00000000e+00, -1.24900090e-16],
#        [-5.55111512e-17,  1.00000000e+00]])
# >>>
# >>> m4 @ m4_L
# array([[ 0.33469388,  0.03673469,  0.33469388,  0.33061224],
#        [ 0.03673469,  0.99183673,  0.03673469, -0.07346939],
#        [ 0.33469388,  0.03673469,  0.33469388,  0.33061224],
#        [ 0.33061224, -0.07346939,  0.33061224,  0.33877551]])

# >>> m5
# array([[-1, -7, -9],
#        [ 9,  3,  8]])
# >>>
# >>> matrix_rank(m5)
# np.int64(2)
# >>>
# >>> m5_WWt = m5 @ m5.T
# >>> m5_WWt
# array([[ 131, -102],
#        [-102,  154]])
# >>>
# >>> matrix_rank(m5_WWt)
# np.int64(2)
# >>>
# >>> m5_WWt_inv = inv(m5_WWt)
# >>> m5_WWt_inv
# array([[0.01576254, 0.01044012],
#        [0.01044012, 0.01340839]])
# >>>
# >>> m5_R = m5.T @ m5_WWt_inv
# >>> m5_R
# array([[ 0.07819857,  0.11023541],
#        [-0.0790174 , -0.03285568],
#        [-0.05834186,  0.01330604]])
# >>>
# >>> m5 @ m5_R
# array([[ 1.00000000e+00, -4.16333634e-17],
#        [-2.77555756e-16,  1.00000000e+00]])
# >>>
# >>> m5_R @ m5
# array([[ 0.91392016, -0.21668373,  0.17809621],
#        [-0.21668373,  0.45455476,  0.44831116],
#        [ 0.17809621,  0.44831116,  0.63152508]])

